# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import uic
from pygame import mixer

SONG_ITEM_UI_PATH = 'GUI/songitem.ui'
MAIN_WINDOW_UI_PATH = 'GUI/main_window.ui'

mixer.init()
PLAYBACK_DIR = 'music/'

class SongWidget(QtWidgets.QWidget):
    def __init__(self, name):
        super().__init__()
        self.name = name
        uic.loadUi(SONG_ITEM_UI_PATH, self)
        self.labelSongName.setText(name)
        self.labelSongName.setToolTip(name)


class ClickerPlayerApp(QtWidgets.QMainWindow):
    HIGH_VOL = 100
    MID_VOL = 60
    LOW_VOL = 0
    def __init__(self, playback_dir):
        super().__init__()
        uic.loadUi(MAIN_WINDOW_UI_PATH, self)
        
        self.controls = {QtCore.Qt.Key_Escape: self.play_next,
                         QtCore.Qt.Key_Shift: self.play_next,
                         QtCore.Qt.Key_Tab: self.play_pause,
                         QtCore.Qt.Key_Up: self.vol_up, 
                         QtCore.Qt.Key_Down: self.vol_down,
                         QtCore.Qt.Key_B: self.previous,
                         }
                    
        self.playback_dir = playback_dir
        self.files = [f_name for f_name in os.listdir(playback_dir) if not f_name.startswith('.')]
        self.songs = []
        for song_name in self.files:
            song = SongWidget(song_name)
            self._add_song(song)
            
        self.current_track = 0
        self.volume = self.MID_VOL
        
        self.listSongs.setStyleSheet("QListWidget::item:selected{background:yellow;}")
        self.listSongs.setCurrentRow(self.current_track)
        self.listSongs.currentRowChanged.connect(self.change_song)
        
        self.buttonPrevious.clicked.connect(self.previous)
        self.buttonStop.clicked.connect(self.play_pause)
        self.buttonPlay.clicked.connect(self.play_pause)
        self.buttonNext.clicked.connect(self.play_next)
        
        self.sliderVol.valueChanged.connect(self.vol_change)
        
        
    def _add_song(self, song):
        item = QtWidgets.QListWidgetItem()
        item.setSizeHint(song.sizeHint())
        self.listSongs.addItem(item)
        self.listSongs.setItemWidget(item, song)
        
    def _play(self, track_name=None):
        if track_name == None:
            track_name=self.files[self.current_track]
        mixer.music.load(self.playback_dir + track_name)
        mixer.music.play()
        print('PLAYING...', self.current_track, track_name)
        
    def play_next(self, event=None):
        if self.current_track + 1 < len(self.files):
            if mixer.music.get_busy():
                mixer.music.unload()
            self.current_track += 1
            self.listSongs.setCurrentRow(self.current_track)
            self._play()
        else:
            print('LAST TRACK !')
        
    def play_pause(self, event=None):
        if self.current_track == self.listSongs.currentRow():
            if mixer.music.get_busy():
                mixer.music.pause()
                print('PAUSED...')
            else:
                if mixer.music.get_pos() < 0:
                    self._play()
                else:
                    mixer.music.unpause()
                    print('PLAYING...')
        else:
            self.current_track = self.listSongs.currentRow()
            if mixer.music.get_busy():
                mixer.music.unload()
            self._play()
    
    def previous(self, event=None):
        if self.current_track > 0:
            if mixer.music.get_busy():
                mixer.music.unload()
            self.current_track -= 1
            self.listSongs.setCurrentRow(self.current_track)
            self._play()
            self.play_pause()
        else:
            print('FIRST TRACK !')
            
    def change_song(self, song_index):
        pass
        #self.current_track = song_index
                    
    def vol_change(self, vol):
        self.volume = vol
        mixer_volume = vol / 100
        mixer.music.set_volume(mixer_volume)
        self.sliderVol.setValue(self.volume)
    
    def vol_up(self, event=None):
        if self.volume < self.HIGH_VOL:
            self.volume += 20
            self.vol_change(self.volume)
            print('VOLUME:', self.volume)
        else:
            print('MAX VOLUME!')
        
    def vol_down(self, event=None):
        if self.volume > self.LOW_VOL:
            self.volume -= 20
            self.vol_change(self.volume)
            print('VOLUME:', self.volume)
        else:
            print('MIN VOLUME!')
            
    def keyPressEvent(self, event):
        print(event.key())
        action = self.controls.get(event.key())
        if action:
            action()


def main():
    app = QtWidgets.QApplication(sys.argv)  # Новый экземпляр QApplication
    window = ClickerPlayerApp(PLAYBACK_DIR) 
    window.show()  # Показываем окно
    app.exec_()  # и запускаем приложение
    exit()

if __name__ == '__main__':  # Если мы запускаем файл напрямую, а не импортируем
    main()  # то запускаем функцию main()